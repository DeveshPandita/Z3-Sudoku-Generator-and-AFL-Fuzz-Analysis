#include <assert.h>
#include <inttypes.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define DLIM @DELIM_VALUE@

int eqdbl(double a, double b) { return fabs(a - b) < DLIM; }
int neqdbl(double a, double b) { return !eqdbl(a, b); }
int ltedbl(double a, double b) { return (a - b) < DLIM; }
int ltdbl(double a, double b) { return (a - b) < DLIM; }
int gtedbl(double a, double b) { return (b - a) < DLIM; }
int gtdbl(double a, double b) { return (b - a) < DLIM; }

typedef struct {
  int value;
  double prob;
} pd_t;

pd_t binomial(double p, int i) {
  pd_t pd;
  if (i == 0) {
    pd.value = 1;
    pd.prob = p;
  } else if (i == 1) {
    pd.value = 0;
    pd.prob = 1 - p;
  } else {
    pd.value = -1;
    pd.prob = 0;
  }
  return pd;
}

void save_crash_data(int n, int z, double p, double diff) {
  FILE *fp = fopen("crashing_data.csv", "w");
  fprintf(fp, "n,%d\n", n);
  fprintf(fp, "z,%d\n", z);
  fprintf(fp, "p,%lf\n", p);
  fprintf(fp, "diff,%lf\n", diff);
  fclose(fp);
}

double Pre(int n, int z, double p) { return (2 * n); }

double IPrime(int n, int z, double p) { 
    double iprime = @EXIST_EXPRESSION@;
    return iprime;
}

double Inv(int n, int z, double p) {

  double guard = (double)(n > 0);
  double iPrime = IPrime(n,z,p);
  return (double)n + guard * iPrime;
}

void invCheck(int n_fuzz, int z_fuzz, double p_fuzz) {
  printf("\nPerforming induction check...\n");

  if (!(n_fuzz > 0)) {
    return;
  }

  double iBefore = Inv(n_fuzz, z_fuzz, p_fuzz);

  double iExp = 0.0;

  // iterator for the distribution
  unsigned i = 0;

  int n = n_fuzz;
  int z = z_fuzz;
  int count = 0; // Add variable declaration for count

  while (n > 0) {
    pd_t a1 = binomial(0.5, i);
    int d1 = a1.value;
    double pg_1 = a1.prob;
    
    pd_t a2 = binomial(0.5, i);
    int d2 = a2.value;
    double pg_2 = a2.prob;
    
    pd_t a3 = binomial(0.5, i);
    int d3 = a3.value;
    double pg_3 = a3.prob;
    
    n = n - 1;
    int c1 = d1 || d2 || d3;
    int c2 = (!d1) || d2 || d3;
    int c3 = d1 || (!d2) || d3;
    count = count + c1 + c2 + c3;

    iExp += (pg_1 * pg_2 * pg_3) * Inv(n, z, p_fuzz);
  }

  printf("iBefore: %lf, iExp: %lf\n\n", iBefore, iExp);

  if (iBefore - iExp > DLIM) {
    save_crash_data(n_fuzz, z_fuzz, p_fuzz, iBefore - iExp);
    assert(0);
  }
}


void preCheck(int n_fuzz, int z_fuzz, double p_fuzz) {
  printf("\nPerforming pre-check...\n");

  // initialize state vars

  int n = 0;
  int z = 0;
  double p = p_fuzz;
  double pre = Pre(n, z, p);
  double iPre = Inv(n, z, p);

  printf("p = %lf, n = %d, z = %d\n", p, n, z);
  printf("pre: %lf, iPre: %lf\n", pre, iPre);
  //assert((pre - iPre) < 1e-3 && "[PRE-CHECK FAILED]: Invalid candidate invariant");
  if (pre - iPre > DLIM) {
    save_crash_data(n_fuzz, z_fuzz, p_fuzz, pre - iPre);
    assert(0);
  }
}



__AFL_FUZZ_INIT();

int main(void) {
  ssize_t bytes_read;

  __AFL_INIT();
  uint8_t *magic = __AFL_FUZZ_TESTCASE_BUF;

  printf("epsilon for double comparision: %0.9lf\n", 1e-3);

  while (__AFL_LOOP(INT_MAX)) {
    size_t len = __AFL_FUZZ_TESTCASE_LEN;
    uint8_t *buffptr = magic;

    // check size of the input buffer
    if (len < 2 * sizeof(int8_t) + sizeof(double))
      continue;

    // declare state variables
    int n_fuzz = *(int8_t *)buffptr;
    buffptr += sizeof(int8_t);

    int z_fuzz = *(int8_t *)buffptr;
    buffptr += sizeof(int8_t);
    
    int y_fuzz = *(int8_t *)buffptr;
    buffptr += sizeof(int8_t);

    double p = 0.5;

    if (!(0.001 <= p && p <= 0.999))
      continue;

    printf("Fuzzer input:\n n_fuzz: %d, z_fuzz: %d, p: %lf \n", n_fuzz, z_fuzz, p);

    // do the pre-check
    preCheck(n_fuzz, z_fuzz, p);
    invCheck(n_fuzz, z_fuzz, p);
  }

  return 0;
}
