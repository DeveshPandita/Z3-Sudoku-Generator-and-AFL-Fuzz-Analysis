#include <assert.h>
#include <inttypes.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define DLIM @DELIM_VALUE@

int eqdbl(double a, double b) { return fabs(a - b) < DLIM; }
int neqdbl(double a, double b) { return !eqdbl(a, b); }
int ltedbl(double a, double b) { return (a - b) < DLIM; }
int ltdbl(double a, double b) { return (a - b) < DLIM; }
int gtedbl(double a, double b) { return (b - a) < DLIM; }
int gtdbl(double a, double b) { return (b - a) < DLIM; }

typedef struct {
  int value;
  double prob;
} pd_t;

pd_t binomial(double p, int i) {
  pd_t pd;
  if (i == 0) {
    pd.value = 1;
    pd.prob = p;
  } else if (i == 1) {
    pd.value = 0;
    pd.prob = 1 - p;
  } else {
    pd.value = -1;
    pd.prob = 0;
  }
  return pd;
}


void save_crash_data(int x, double p1, double p2, double diff) {
  FILE *fp = fopen("crashing_data.csv", "w");
  fprintf(fp, "x,%d\n", x);
  fprintf(fp, "p1,%lf\n", p1);  
  fprintf(fp, "p2,%lf\n", p2);
  fprintf(fp, "diff,%lf\n", diff);
  fclose(fp);
}

double Pre(int x, double p1, double p2) {
  return (1);
}

double IPrime(int x, double p1, double p2) {
    double iprime = @EXIST_EXPRESSION@;
    return iprime;
}

double Inv(int x, double p1, double p2) {
  double guard = (double)(x == 0);
  double iPrime = IPrime(x, p1, p2);
  return (double)x + guard * iPrime;
}

void invCheck(int x_fuzz, double p1_fuzz, double p2_fuzz) {
  printf("\nPerforming induction check...\n");
  if (!(x_fuzz == 0)) { // if guard is false return
    return;
  }
  double iBefore = Inv(x_fuzz, p1_fuzz, p2_fuzz);

  double iExp = 0.0;
  // iterator for the distribution
  unsigned i1 = 0;

  int x = x_fuzz;
  double p1 = p1_fuzz;
  double p2 = p2_fuzz;

  while (1) {
    int d1 = 0;
    int d2 = 0;
    pd_t a1 = binomial(p1_fuzz, i1++);
    d1 = a1.value;

    if (d1 == -1) break; // exit condition for outer while loop

    unsigned i2 = 0;    
    while(1) {
      pd_t a2 = binomial(p2_fuzz, i2++);
      d2 = a2.value;

      double p1 = a1.prob;
      double p2 = a2.prob;

      if (d2 == -1) break; // exit condition for inner while loop

      int x = x_fuzz;

      if (d1) x = 0;
      else {
	if (d2) {
	  x = -1;
	}
	else {
	  x = 1;
	}
      }

      iExp += (p1 * p2) * Inv(x, p1, p2);
    }
  }
  printf("iBefore: %lf, iExp: %lf\n\n", iBefore, iExp);
  if (iBefore - iExp > DLIM) {
    save_crash_data(x_fuzz, p1_fuzz, p2_fuzz, iBefore - iExp);
    assert(0);
  }
}

void preCheck(int x_fuzz, double p1_fuzz, double p2_fuzz) {
  printf("\nPerforming pre-check...\n");

  // initialize state vars

  int x = x_fuzz;
  if (!(x == 0))
    return;

  double p1 = p1_fuzz;
  double p2 = p2_fuzz;
  double pre = Pre(x, p1, p2);
  double iPre = Inv(x, p1, p2);

  printf("p1 = %lf, p2 = %lf, x = %d\n", p1, p2, x);
  printf("pre: %lf, iPre: %lf\n", pre, iPre);
  // assert((pre - iPre) < 1e-3 && "[PRE-CHECK FAILED]: Invalid candidate invariant");

  if (pre - iPre > DLIM) {
    save_crash_data(x_fuzz, p1_fuzz, p2_fuzz, pre - iPre);
    assert(0);
  }
}



__AFL_FUZZ_INIT();

int main(void) {
  ssize_t bytes_read;

  __AFL_INIT();
  uint8_t *magic = __AFL_FUZZ_TESTCASE_BUF;

  printf("epsilon for double comparision: %0.5lf\n", DLIM);

  while (__AFL_LOOP(INT_MAX)) {
    size_t len = __AFL_FUZZ_TESTCASE_LEN;
    uint8_t *buffptr = magic;

    // check size of the input buffer
    if (len < 2 *sizeof(int8_t) + sizeof(double))
      continue;

    // declare state variables
    int x_fuzz = *(int8_t *)buffptr;
    buffptr += sizeof(int8_t);

    double p1 = *(double *)buffptr;
    buffptr += sizeof(double);
    
    double p2 = *(double *)buffptr;
    buffptr += sizeof(double);

    if (!(0.001 <= p1 && p1 <= 0.999))
      continue;

    if (!(0.001 <= p2 && p2 <= 0.999))
      continue;

    printf("Fuzzer input:\n x_fuzz: %d, p1: %lf, p2: %lf \n", x_fuzz, p1, p2);

    // do the pre-check
    preCheck(x_fuzz, p1, p2);
    invCheck(x_fuzz, p1, p2);
  }

  return 0;
}
